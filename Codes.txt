from sklearn import linear_model
import sklearn.metrics as sm
import matplotlib.pyplot as plt
import pandas
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt

# Input file containing data
dataset = np.genfromtxt("/content/GravitywaveDataset.csv", delimiter=',')
X, y = dataset[:, 0:-1], dataset[:, -1]

# Split the dataset into the training set and test set
# We're splitting the data in 0.2
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size = 0.2, 
                                                    random_state = 0)
# Create linear regressor object
regressor = linear_model.LinearRegression()

# Train the model using the training sets
regressor.fit(X_train, y_train)

# Predict the output
y_test_pred = regressor.predict(X_test)

# Plot outputs
#plt.scatter(X_test, y_test, color='green')
#plt.plot(X_test, y_test_pred, color='black', linewidth=4)
#plt.show()

# Compute performance metrics
print("Linear regressor performance:")
print("Mean absolute error =", round(sm.mean_absolute_error(y_test, y_test_pred), 2))
print("Mean squared error =", round(sm.mean_squared_error(y_test, y_test_pred), 2)) 

# Model persistence
output_model_file = 'model.pkl'
import pickle
# Save the model
with open(output_model_file, 'wb') as f:
    pickle.dump(regressor, f)

# Load the model
with open(output_model_file, 'rb') as f:
    regressor_model = pickle.load(f)

# New Feature Set
import numpy as np 

X_new = np.array([[2020]])
print(X_new)


# Perform prediction on test data
y_test_pred_new = regressor_model.predict(X_new)
print(y_test_pred_new)

plt.plot(y_test, color = 'red', label = 'Real data')
plt.plot(y_test_pred, color = 'blue', label = 'Predicted data')
plt.title('Gravity wave')
plt.legend()
plt.show()